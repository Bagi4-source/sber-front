// tslint:disable
/**
 * Select API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    Option,
    OptionFromJSON,
    OptionToJSON,
    SelectedOption,
    SelectedOptionFromJSON,
    SelectedOptionToJSON,
    ServerMessage,
    ServerMessageFromJSON,
    ServerMessageToJSON,
} from '../models';

export interface PostSelectedOptionRequest {
    selectedOption: SelectedOption;
}


/**
 * Get options
 */
function getOptionsRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Option>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/options/for/select`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(OptionFromJSON), text);
    }

    return config;
}

/**
* Get options
*/
export function getOptions<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Option>>): QueryConfig<T> {
    return getOptionsRaw( requestConfig);
}

/**
 * Submit selected option
 */
function postSelectedOptionRaw<T>(requestParameters: PostSelectedOptionRequest, requestConfig: runtime.TypedQueryConfig<T, ServerMessage> = {}): QueryConfig<T> {
    if (requestParameters.selectedOption === null || requestParameters.selectedOption === undefined) {
        throw new runtime.RequiredError('selectedOption','Required parameter requestParameters.selectedOption was null or undefined when calling postSelectedOption.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/selected/option`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SelectedOptionToJSON(requestParameters.selectedOption),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ServerMessageFromJSON(body), text);
    }

    return config;
}

/**
* Submit selected option
*/
export function postSelectedOption<T>(requestParameters: PostSelectedOptionRequest, requestConfig?: runtime.TypedQueryConfig<T, ServerMessage>): QueryConfig<T> {
    return postSelectedOptionRaw(requestParameters, requestConfig);
}

